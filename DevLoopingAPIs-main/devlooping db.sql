USE DEVLOOPING;
-- Definición de tabla USER_TYPE (tabla independiente)
CREATE TABLE USER_TYPE (
    id_usertype INTEGER PRIMARY KEY AUTO_INCREMENT,
    name_type VARCHAR(255) NOT NULL,
    desc_type VARCHAR(255) NOT NULL
);

-- Definición de tabla PERMISSION (tabla independiente)
CREATE TABLE PERMISSION (
    id_permission INTEGER PRIMARY KEY AUTO_INCREMENT,
    name_permission VARCHAR(255) NOT NULL,
    desc_permission VARCHAR(255) NOT NULL
);

-- Definición de tabla ACHIEVEMENT (tabla independiente)
CREATE TABLE ACHIEVEMENT (
    id_achievement INTEGER PRIMARY KEY AUTO_INCREMENT,
    name_achievement VARCHAR(255) NOT NULL,
    desc_achievement VARCHAR(255) NOT NULL
);

-- Definición de tabla DIFFICULTY (tabla independiente)
CREATE TABLE DIFFICULTY(
	id_difficulty INTEGER PRIMARY KEY AUTO_INCREMENT,
	desc_difficulty VARCHAR(20) UNIQUE not null
);

-- Definición de tabla CHALLENGE (tabla dependiente de DIFFICULTY)
CREATE TABLE CHALLENGE (
    id_challenge INTEGER PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    desc_challenge VARCHAR(255) NOT NULL,
    DIFFICULTY_id_difficulty  INTEGER, 
    start_at DATE NOT NULL,
    end_at DATE,
    CONSTRAINT CHALLENGE_DIFFICULTY_FK FOREIGN KEY (DIFFICULTY_id_difficulty) REFERENCES DIFFICULTY(id_difficulty) ON DELETE CASCADE ON UPDATE CASCADE
);



-- Definición de tabla USER (depende de USER_TYPE)
CREATE TABLE `USER` (
    id_user INTEGER PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hashed VARCHAR(255) NOT NULL,
    created_at DATE NOT NULL,
    deactivated_at DATE,
    status VARCHAR(255),
    profile_pic_url VARCHAR(255),
    user_type_id INTEGER NOT NULL,
    CONSTRAINT USER_USER_TYPE_FK FOREIGN KEY (user_type_id) REFERENCES USER_TYPE(id_usertype) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Definición de tabla PERMISSION_USER (depende de PERMISSION y USER)
CREATE TABLE PERMISSION_USER (
    PERMISSION_id_permission INTEGER NOT NULL,
    USER_id_user INTEGER NOT NULL,
    CONSTRAINT PERMISSION_USER_PERMISSION_FK FOREIGN KEY (PERMISSION_id_permission) REFERENCES PERMISSION(id_permission) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT PERMISSION_USER_USER_FK FOREIGN KEY (USER_id_user) REFERENCES `USER`(id_user) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE KEY permission_user_unique (PERMISSION_id_permission, USER_id_user)
);

-- Definición de tabla ARCHIEVEMENT_USER (depende de USER y ACHIEVEMENT)
CREATE TABLE ARCHIEVEMENT_USER (
    USER_id_user INTEGER NOT NULL,
    ACHIEVEMENT_id_achievement INTEGER NOT NULL,
    created_at DATE NOT NULL,
    CONSTRAINT ARCHIEVEMENT_USER_USER_FK FOREIGN KEY (USER_id_user) REFERENCES `USER`(id_user) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT ARCHIEVEMENT_USER_ACHIEVEMENT_FK FOREIGN KEY (ACHIEVEMENT_id_achievement) REFERENCES ACHIEVEMENT(id_achievement) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE KEY archievement_user_unique (USER_id_user, ACHIEVEMENT_id_achievement)
);

-- Definición de tabla CHALLENGE_USER (depende de USER y CHALLENGE)
CREATE TABLE CHALLENGE_USER (
    USER_id_user INTEGER NOT NULL,
    CHALLENGE_id_challenge INTEGER NOT NULL,
    CONSTRAINT CHALLENGE_USER_USER_FK FOREIGN KEY (USER_id_user) REFERENCES `USER`(id_user) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT CHALLENGE_USER_CHALLENGE_FK FOREIGN KEY (CHALLENGE_id_challenge) REFERENCES CHALLENGE(id_challenge) ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE KEY challenge_user_unique (USER_id_user, CHALLENGE_id_challenge)
);

-- Definición de tabla CHALLENGE_TIP (depende de CHALLENGE)
CREATE TABLE CHALLENGE_TIP (
    id_tip INTEGER PRIMARY KEY AUTO_INCREMENT,
    desc_tip VARCHAR(255),
    CHALLENGE_id_challenge INTEGER NOT NULL,
    CONSTRAINT CHALLENGE_TIP_CHALLENGE_FK FOREIGN KEY (CHALLENGE_id_challenge) REFERENCES CHALLENGE(id_challenge) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Definición de tabla ANSWER (depende de CHALLENGE)
CREATE TABLE ANSWER (
    id_answer INTEGER PRIMARY KEY AUTO_INCREMENT,
    desc_answer VARCHAR(255),
    CHALLENGE_id_challenge INTEGER NOT NULL,
    CONSTRAINT ANSWER_CHALLENGE_FK FOREIGN KEY (CHALLENGE_id_challenge) REFERENCES CHALLENGE(id_challenge) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Definición de tabla POST (depende de USER)
CREATE TABLE POST (
    id_post INTEGER PRIMARY KEY AUTO_INCREMENT,
    desc_post VARCHAR(255) NOT NULL,
    img_post BLOB,
    like_post INTEGER,
    created_at DATETIME NOT NULL,
    updated_at DATETIME,
    USER_id_user INTEGER NOT NULL,
    CONSTRAINT POST_USER_FK FOREIGN KEY (USER_id_user) REFERENCES `USER`(id_user) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Definición de tabla COMMENT (depende de USER y POST)
CREATE TABLE COMMENT (
    id_comment INTEGER PRIMARY KEY AUTO_INCREMENT,
    desc_comment TEXT NOT NULL,
    created_at DATETIME NOT NULL,
    USER_id_user INTEGER NOT NULL,
    POST_id_post INTEGER NOT NULL,
    CONSTRAINT COMMENT_USER_FK FOREIGN KEY (USER_id_user) REFERENCES `USER`(id_user) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT COMMENT_POST_FK FOREIGN KEY (POST_id_post) REFERENCES POST(id_post) ON DELETE CASCADE ON UPDATE CASCADE
);